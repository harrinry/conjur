#!/usr/bin/env bash

set -e
. k8s/utils

# Create KinD cluster and local Docker registry
# Check if KinD cluster has already been created
if [ "$(kind get clusters | grep "^$KIND_CLUSTER_NAME$")" = "$KIND_CLUSTER_NAME" ]; then
    echo "KinD cluster '$KIND_CLUSTER_NAME' already exists. Skipping cluster creation."
    if [ "$(registry_container_is_running)" != "true" ]; then
        echo "KinD cluster '$KIND_CLUSTER_NAME' does not have an internal Docker registry running"
        echo "and 'USE_DOCKER_LOCAL_REGISTRY' is set to 'true'. To use an"
        echo "internal Docker registry, please delete the KinD cluster:"
        echo "    kind delete cluster --name $KIND_CLUSTER_NAME"
        echo "and restart the demo scripts to create a new KinD cluster."
        exit 1
    fi
else
    announce "Creating KinD Cluster with local registry"

    reg_name="$DOCKER_REG_NAME"
    reg_port="$DOCKER_REG_PORT"

    # create registry container unless it already exists
    if [ "$(registry_container_is_running)" != "true" ]; then
        echo "Creating a registry container"
        # Create a Docker network named 'kind' if not already created
        docker network inspect kind >/dev/null 2>&1 || \
            docker network create kind
        docker run \
            -d --restart=always -p "${reg_port}:${reg_port}" --name "${reg_name}" --net=kind \
            registry:2
    fi
    reg_ip="$(docker inspect -f '{{.NetworkSettings.Networks.kind.IPAddress}}' "${reg_name}")"

    # create a cluster with the local registry enabled in containerd
    cat <<EOF | kind create cluster --name "${KIND_CLUSTER_NAME}" --config=-
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
containerdConfigPatches:
- |-
  [plugins."io.containerd.grpc.v1.cri".registry.mirrors."localhost:${reg_port}"]
    endpoint = ["http://${reg_ip}:${reg_port}"]
EOF

fi
